name: Test, Build

on:
  push:
    branches:
      - '**'
jobs:
  test:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        node-version: [20, 22, 25.1.0]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run test:int
  test-container:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - run: docker compose -f docker-compose.test.yml run chat npm run test:int
  test-e2e:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        node-version: [20, 22, 25.1.0]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run test:e2e
  test-container-e2e:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - run: docker compose -f docker-compose.test.yml run chat npm run test:e2e
  test-coverage:
    runs-on: ubuntu-24.04
    needs: [test]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: 25.1.0
          cache: 'npm'
      - run: npm ci
      - run: npm run test:cov
      - uses: actions/upload-artifact@master
        with:
          name: coverage
          path: coverage
  lint:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: 25.1.0
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
  tsc:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        node-version: [20, 22, 25.1.0]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run tsc
  version-bump:
    if: "!startsWith(github.event.head_commit.message, '[RELEASE]') && github.ref == 'refs/heads/main'"
    runs-on: ubuntu-24.04
    needs: [tsc, lint, test, test-e2e, test-container, test-container-e2e]
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{secrets.PAT}}
      - uses: actions/setup-node@v6
        with:
          node-version: 25.1.0
          cache: 'npm'
      - run: |
          git config --global user.name 'Johannes Jahn'
          git config --global user.email 'johannes.jahn@outlook.com'
          NEW_VERSION=$(npm version patch --no-git-tag-version)  
          git add .
          git commit -m "[RELEASE] ${NEW_VERSION:1}"
          git tag -a "$NEW_VERSION" -m "[RELEASE] ${NEW_VERSION:1}"
          git push
          git push --tags
  build:
    runs-on: ubuntu-24.04
    needs: [tsc, lint, test, test-e2e]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v6
        with:
          node-version: 25.1.0
          cache: 'npm'
      - run: npm ci
      - run: npm run build
      - uses: montudor/action-zip@v1
        with:
          args: zip -qq -r dist.zip dist
      - uses: actions/upload-artifact@master
        with:
          name: dist
          path: dist.zip
  build-image:
    if: startsWith(github.event.head_commit.message, '[RELEASE]') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    needs: [tsc, lint, test, test-e2e, test-container, test-container-e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract version
        id: meta
        run: echo "version=$(jq -r .version ./package.json)" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            johannesjahn/chat-api:latest
            johannesjahn/chat-api:${{ env.version }}
  create-image-tag-pr:
    if: startsWith(github.event.head_commit.message, '[RELEASE]') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    needs: [build-image]
    steps:
      - name: Checkout Source
        uses: actions/checkout@v5
      - name: Configure Git
        run: |
          git config --global user.email "johannes.jahn@outlook.com"
          git config --global user.name "Johannes Jahn"
      - name: Clone and Modify Helm Repository
        env:
          PAT: ${{ secrets.TARGET_REPO_PAT }}
          TARGET_REPO: johannesjahn/chat-api-helm
        run: |
          sudo snap install yq --classic
          sudo snap install jq --classic
          VERSION=$(jq -r .version ./package.json)
          TARGET_BRANCH="chore/bump-chat-api-to-${VERSION}"
          git clone https://${{ github.actor }}:${{ env.PAT }}@github.com/${{ env.TARGET_REPO }}.git ${{ env.TARGET_REPO }}
          cd ${{ env.TARGET_REPO }}
          git checkout -b $TARGET_BRANCH

          yq eval ".images.backend.version = \"${VERSION}\"" -i values.yaml

          git add .
          git commit -m "Bump backend to chat-api ${VERSION}"

          git push origin $TARGET_BRANCH

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh -y

      - name: Create Pull Request in chat-api-helm
        env:
          GH_TOKEN: ${{ secrets.TARGET_REPO_PAT }}
          TARGET_REPO: johannesjahn/chat-api-helm
          TARGET_BRANCH: chore/bump-image-tag
          PR_TITLE: 'Automated PR: Update from Source Repo'
          PR_BODY: 'This PR was automatically generated by the GitHub Action workflow in ${{ github.repository }}.'
        run: |
          VERSION=$(jq -r .version ./package.json)
          TARGET_BRANCH="chore/bump-chat-api-to-${VERSION}"
          gh pr create \
            --repo ${{ env.TARGET_REPO }} \
            --title "${{ env.PR_TITLE }}" \
            --body "${{ env.PR_BODY }}" \
            --head $TARGET_BRANCH \
            --base main
